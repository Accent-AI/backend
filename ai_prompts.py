def get_accent_message_prompt(detected_accent, confidence, top_accents):
    """Prompt for general accent detection (model_utils.py)"""
    return f"""Based on an accent classification analysis, please provide a brief, friendly response about the detected accent. Here are the details:\n\n- Primary detected accent: {detected_accent}\n- Confidence score: {confidence:.2%}\n- Top 3 accent probabilities:\n  1. {top_accents[0][0]}: {top_accents[0][1]:.2%}\n  2. {top_accents[1][0]}: {top_accents[1][1]:.2%}\n  3. {top_accents[2][0]}: {top_accents[2][1]:.2%}\n\nPlease provide a 2-3 sentence response that:\n1. Confirms the detected accent in a friendly way\n2. Mentions the confidence level\n3. Optionally mentions any interesting observations about similar accents detected\n\nKeep it conversational and informative, around 50-80 words."""

def get_similarity_message_prompt(target_accent, similarity_level, target_prob, detected_accent, detected_confidence):
    """Prompt for accent similarity analysis (accent_analyzer.py)"""
    return f"""Based on an accent similarity analysis, please provide a brief, friendly response about the similarity to the target accent. Here are the details:\n\n- Target accent: {target_accent}\n- Similarity level: {similarity_level}\n- Probability for target accent: {target_prob:.1%}\n- Detected accent: {detected_accent}\n- Detected accent confidence: {detected_confidence:.1%}\n\nPlease provide a 2-3 sentence response that:\n1. Comments on the similarity to the target accent\n2. Mentions the detected accent and its confidence\n3. Optionally mentions any interesting observations about the similarity\n\nKeep it conversational and informative, around 50-80 words.""" 